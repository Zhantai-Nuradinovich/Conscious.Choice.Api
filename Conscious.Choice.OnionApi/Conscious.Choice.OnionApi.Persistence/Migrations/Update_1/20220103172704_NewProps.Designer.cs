// <auto-generated />
using System;
using Conscious.Choice.OnionApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conscious.Choice.OnionApi.Persistence.Migrations.Update_1
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220103172704_NewProps")]
    partial class NewProps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "2de7f8f7-ff1c-4566-90f5-9e52925b1e02",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2dda8516-08e4-49c9-a4a7-ab2fe4e5964f",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amit",
                            LastName = "Naik",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0d2cfd4d-620d-4cbe-aea0-bdc9b5899e76",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "0766a4a8-c697-4a2e-9fd6-69bfd6223722",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4031f367-e4ff-4369-8b14-fcabeabc96ff",
                            Email = "basicuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Basic",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "e4985979-e7b6-40fb-a815-d779fd5406f5",
                            TwoFactorEnabled = false,
                            UserName = "basicuser"
                        });
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyPartyMovingsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EntranceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDeputy")
                        .HasColumnType("int");

                    b.Property<int>("IdParty")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentParty")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdDeputy");

                    b.HasIndex("IdParty");

                    b.ToTable("DeputyPartyMovingsHistories");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDeputy")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdDeputy");

                    b.HasIndex("IdUser");

                    b.ToTable("DeputyUsers");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AmendmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LawId")
                        .HasColumnType("int");

                    b.Property<string>("LinkToLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToVotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RPartyConvocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasWon")
                        .HasColumnType("bit");

                    b.Property<int>("IdConvocation")
                        .HasColumnType("int");

                    b.Property<int>("IdParty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConvocation");

                    b.HasIndex("IdParty");

                    b.ToTable("PartyConvocations");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConvocationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Convocations");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRealDeputy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deputies");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("LawDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LawName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laws");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLeaderDeputy")
                        .HasColumnType("int");

                    b.Property<int?>("IdParentParty")
                        .HasColumnType("int");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLeaderDeputy");

                    b.HasIndex("IdParentParty");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<int>("DeputyId")
                        .HasColumnType("int");

                    b.Property<int>("LawsAmendmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeputyId");

                    b.HasIndex("LawsAmendmentId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "77c1c5ec-b377-4764-9a5a-d741d749d72a",
                            ConcurrencyStamp = "e32df527-ca13-43d9-9daa-139466fe474c",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "07719d36-3c25-48ef-9785-ebda3325522b",
                            ConcurrencyStamp = "9d4c5e14-3bcc-4cda-838a-d4dfd1fbf7c2",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "d9bb9f5e-fb27-4603-8e1d-d06ccbc31fb6",
                            ConcurrencyStamp = "e6cb9041-6da6-4db1-b09c-38241ad27904",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "2279c1fe-1452-47fc-9b3c-6bf3119b3915",
                            ConcurrencyStamp = "57aa5b2e-7e3e-4460-83cf-ab715ca8f9d8",
                            Name = "Basic",
                            NormalizedName = "Basic"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "0766a4a8-c697-4a2e-9fd6-69bfd6223722",
                            RoleId = "2279c1fe-1452-47fc-9b3c-6bf3119b3915"
                        },
                        new
                        {
                            UserId = "2de7f8f7-ff1c-4566-90f5-9e52925b1e02",
                            RoleId = "77c1c5ec-b377-4764-9a5a-d741d749d72a"
                        },
                        new
                        {
                            UserId = "2de7f8f7-ff1c-4566-90f5-9e52925b1e02",
                            RoleId = "07719d36-3c25-48ef-9785-ebda3325522b"
                        },
                        new
                        {
                            UserId = "2de7f8f7-ff1c-4566-90f5-9e52925b1e02",
                            RoleId = "d9bb9f5e-fb27-4603-8e1d-d06ccbc31fb6"
                        },
                        new
                        {
                            UserId = "2de7f8f7-ff1c-4566-90f5-9e52925b1e02",
                            RoleId = "2279c1fe-1452-47fc-9b3c-6bf3119b3915"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyPartyMovingsHistory", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("DeputyPartyMovingsHistory")
                        .HasForeignKey("IdDeputy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "Party")
                        .WithMany("RDeputyPartyMovingsHistory")
                        .HasForeignKey("IdParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deputy");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyUser", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("DeputyUser")
                        .HasForeignKey("IdDeputy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", "User")
                        .WithMany("DeputyUsers")
                        .HasForeignKey("IdUser");

                    b.Navigation("Deputy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TLaw", "Law")
                        .WithMany("Amendments")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Law");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RPartyConvocation", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", "Convocation")
                        .WithMany("RPartyConvocation")
                        .HasForeignKey("IdConvocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "Party")
                        .WithMany("RPartyConvocation")
                        .HasForeignKey("IdParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convocation");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Leader")
                        .WithMany()
                        .HasForeignKey("IdLeaderDeputy");

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "ParentParty")
                        .WithMany()
                        .HasForeignKey("IdParentParty");

                    b.Navigation("Leader");

                    b.Navigation("ParentParty");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TVote", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("Votes")
                        .HasForeignKey("DeputyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", "LawsAmendment")
                        .WithMany("Votes")
                        .HasForeignKey("LawsAmendmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deputy");

                    b.Navigation("LawsAmendment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("DeputyUsers");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", b =>
                {
                    b.Navigation("RPartyConvocation");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", b =>
                {
                    b.Navigation("DeputyPartyMovingsHistory");

                    b.Navigation("DeputyUser");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TLaw", b =>
                {
                    b.Navigation("Amendments");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.Navigation("RDeputyPartyMovingsHistory");

                    b.Navigation("RPartyConvocation");
                });
#pragma warning restore 612, 618
        }
    }
}
