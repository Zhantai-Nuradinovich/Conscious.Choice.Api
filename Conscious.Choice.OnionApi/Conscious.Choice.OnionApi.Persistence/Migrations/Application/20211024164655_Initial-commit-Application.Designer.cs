// <auto-generated />
using System;
using Conscious.Choice.OnionApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Conscious.Choice.OnionApi.Persistence.Migrations.Application
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211024164655_Initial-commit-Application")]
    partial class InitialcommitApplication
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Identity")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = "99130742-6d5c-4376-b9df-74703f12c67e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a063a78-05d8-41e1-b31c-ee14e9741064",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Amit",
                            LastName = "Naik",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "a20a7003-615b-4386-b54e-6c43248c35e9",
                            TwoFactorEnabled = false,
                            UserName = "superadmin"
                        },
                        new
                        {
                            Id = "b547a355-f6ba-4d8d-a79f-52b449be4a66",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6dfcc565-f989-4933-85a4-e40b871e9361",
                            Email = "basicuser@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Basic",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "cd111262-ea4b-4819-918d-9deb5984268b",
                            TwoFactorEnabled = false,
                            UserName = "basicuser"
                        });
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyPartyMovingsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EntranceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDeputy")
                        .HasColumnType("int");

                    b.Property<int>("IdParty")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentParty")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdDeputy");

                    b.HasIndex("IdParty");

                    b.ToTable("DeputyPartyMovingsHistories");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdDeputy")
                        .HasColumnType("int");

                    b.Property<string>("IdUser")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("IdDeputy");

                    b.HasIndex("IdUser");

                    b.ToTable("DeputyUsers");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AmendmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LawId")
                        .HasColumnType("int");

                    b.Property<string>("LinkToLaw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToVotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LawId");

                    b.ToTable("Amendments");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RPartyConvocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdConvocation")
                        .HasColumnType("int");

                    b.Property<int>("IdParty")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConvocation");

                    b.HasIndex("IdParty");

                    b.ToTable("PartyConvocations");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConvocationNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Convocations");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRealDeputy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Deputies");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TLaw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("LawDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LawName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LawNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Laws");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdLeaderDeputy")
                        .HasColumnType("int");

                    b.Property<int?>("IdParentParty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdLeaderDeputy");

                    b.HasIndex("IdParentParty");

                    b.ToTable("Parties");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<int>("DeputyId")
                        .HasColumnType("int");

                    b.Property<int>("LawsAmendmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeputyId");

                    b.HasIndex("LawsAmendmentId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = "944b9091-9479-4c6e-a1e0-deb8bfc660cd",
                            ConcurrencyStamp = "8052e4aa-ab62-4d30-b9e4-54ca43b3efb5",
                            Name = "SuperAdmin",
                            NormalizedName = "SuperAdmin"
                        },
                        new
                        {
                            Id = "055ab531-b1af-45d4-a600-b5a7b90090e9",
                            ConcurrencyStamp = "d698b572-ed73-4c20-af50-54e0f5db839c",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "3568cf5e-f95c-446c-ad49-ab265fadcb8c",
                            ConcurrencyStamp = "45b42207-5d71-4511-8e48-c4cf3e8c6015",
                            Name = "Moderator",
                            NormalizedName = "Moderator"
                        },
                        new
                        {
                            Id = "9994e316-1b78-48ee-ab65-bea0e4322fb1",
                            ConcurrencyStamp = "92db907b-0881-41e1-8743-d692c21f3350",
                            Name = "Basic",
                            NormalizedName = "Basic"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b547a355-f6ba-4d8d-a79f-52b449be4a66",
                            RoleId = "9994e316-1b78-48ee-ab65-bea0e4322fb1"
                        },
                        new
                        {
                            UserId = "99130742-6d5c-4376-b9df-74703f12c67e",
                            RoleId = "944b9091-9479-4c6e-a1e0-deb8bfc660cd"
                        },
                        new
                        {
                            UserId = "99130742-6d5c-4376-b9df-74703f12c67e",
                            RoleId = "055ab531-b1af-45d4-a600-b5a7b90090e9"
                        },
                        new
                        {
                            UserId = "99130742-6d5c-4376-b9df-74703f12c67e",
                            RoleId = "3568cf5e-f95c-446c-ad49-ab265fadcb8c"
                        },
                        new
                        {
                            UserId = "99130742-6d5c-4376-b9df-74703f12c67e",
                            RoleId = "9994e316-1b78-48ee-ab65-bea0e4322fb1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyPartyMovingsHistory", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("DeputyPartyMovingsHistory")
                        .HasForeignKey("IdDeputy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "Party")
                        .WithMany("RDeputyPartyMovingsHistory")
                        .HasForeignKey("IdParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deputy");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RDeputyUser", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("DeputyUser")
                        .HasForeignKey("IdDeputy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", "User")
                        .WithMany("DeputyUsers")
                        .HasForeignKey("IdUser");

                    b.Navigation("Deputy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TLaw", "Law")
                        .WithMany("Amendments")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Law");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RPartyConvocation", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", "Convocation")
                        .WithMany("RPartyConvocation")
                        .HasForeignKey("IdConvocation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "Party")
                        .WithMany("RPartyConvocation")
                        .HasForeignKey("IdParty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convocation");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Leader")
                        .WithMany()
                        .HasForeignKey("IdLeaderDeputy");

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TParty", "ParentParty")
                        .WithMany()
                        .HasForeignKey("IdParentParty");

                    b.Navigation("Leader");

                    b.Navigation("ParentParty");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TVote", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", "Deputy")
                        .WithMany("Votes")
                        .HasForeignKey("DeputyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", "LawsAmendment")
                        .WithMany("Votes")
                        .HasForeignKey("LawsAmendmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deputy");

                    b.Navigation("LawsAmendment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Auth.ApplicationUser", b =>
                {
                    b.Navigation("DeputyUsers");

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.RLawsAmendment", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TConvocation", b =>
                {
                    b.Navigation("RPartyConvocation");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TDeputy", b =>
                {
                    b.Navigation("DeputyPartyMovingsHistory");

                    b.Navigation("DeputyUser");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TLaw", b =>
                {
                    b.Navigation("Amendments");
                });

            modelBuilder.Entity("Conscious.Choice.OnionApi.Domain.Entities.TParty", b =>
                {
                    b.Navigation("RDeputyPartyMovingsHistory");

                    b.Navigation("RPartyConvocation");
                });
#pragma warning restore 612, 618
        }
    }
}
